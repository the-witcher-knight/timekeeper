// Code generated by mockery v2.43.2. DO NOT EDIT.

package attendance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/the-witcher-knight/timekeeper/internal/model"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// CreateAttendance provides a mock function with given fields: ctx, att
func (_m *MockController) CreateAttendance(ctx context.Context, att model.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAttendances provides a mock function with given fields: ctx, filter
func (_m *MockController) ListAttendances(ctx context.Context, filter FilterInput) ([]model.Attendance, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAttendances")
	}

	var r0 []model.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, FilterInput) ([]model.Attendance, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, FilterInput) []model.Attendance); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, FilterInput) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordAttendanceToBlockchain provides a mock function with given fields: ctx, employerID
func (_m *MockController) RecordAttendanceToBlockchain(ctx context.Context, employerID int64) error {
	ret := _m.Called(ctx, employerID)

	if len(ret) == 0 {
		panic("no return value specified for RecordAttendanceToBlockchain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, employerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAttendanceFromBlockchain provides a mock function with given fields: ctx, filter
func (_m *MockController) RetrieveAttendanceFromBlockchain(ctx context.Context, filter FilterInput) ([]model.Attendance, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAttendanceFromBlockchain")
	}

	var r0 []model.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, FilterInput) ([]model.Attendance, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, FilterInput) []model.Attendance); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, FilterInput) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendanceToBlockchain provides a mock function with given fields: ctx, att
func (_m *MockController) UpdateAttendanceToBlockchain(ctx context.Context, att model.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendanceToBlockchain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
