// Code generated by mockery v2.43.2. DO NOT EDIT.

package bcauth

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// AuthorizeAccount provides a mock function with given fields: ctx, account
func (_m *MockController) AuthorizeAccount(ctx context.Context, account common.Address) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeauthorizeAccount provides a mock function with given fields: ctx, account
func (_m *MockController) DeauthorizeAccount(ctx context.Context, account common.Address) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
