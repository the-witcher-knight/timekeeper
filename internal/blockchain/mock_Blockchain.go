// Code generated by mockery v2.43.2. DO NOT EDIT.

package blockchain

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	contracts "github.com/the-witcher-knight/timekeeper/internal/blockchain/contracts"

	mock "github.com/stretchr/testify/mock"

	model "github.com/the-witcher-knight/timekeeper/internal/model"
)

// MockBlockchain is an autogenerated mock type for the Blockchain type
type MockBlockchain struct {
	mock.Mock
}

// AttendanceContract provides a mock function with given fields:
func (_m *MockBlockchain) AttendanceContract() contracts.Attendance {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AttendanceContract")
	}

	var r0 contracts.Attendance
	if rf, ok := ret.Get(0).(func() contracts.Attendance); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(contracts.Attendance)
	}

	return r0
}

// AuthorizeAccount provides a mock function with given fields: ctx, account
func (_m *MockBlockchain) AuthorizeAccount(ctx context.Context, account common.Address) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeauthorizeAccount provides a mock function with given fields: ctx, account
func (_m *MockBlockchain) DeauthorizeAccount(ctx context.Context, account common.Address) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordAttendance provides a mock function with given fields: ctx, att
func (_m *MockBlockchain) RecordAttendance(ctx context.Context, att model.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for RecordAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAttendance provides a mock function with given fields: ctx, filter
func (_m *MockBlockchain) RetrieveAttendance(ctx context.Context, filter AttendanceFilter) ([]model.Attendance, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAttendance")
	}

	var r0 []model.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, AttendanceFilter) ([]model.Attendance, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, AttendanceFilter) []model.Attendance); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, AttendanceFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendance provides a mock function with given fields: ctx, att
func (_m *MockBlockchain) UpdateAttendance(ctx context.Context, att model.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBlockchain creates a new instance of MockBlockchain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockchain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockchain {
	mock := &MockBlockchain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
