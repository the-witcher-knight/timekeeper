// Code generated by mockery v2.43.2. DO NOT EDIT.

package attendance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/the-witcher-knight/timekeeper/internal/model"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateAttendance provides a mock function with given fields: ctx, att
func (_m *MockRepository) CreateAttendance(ctx context.Context, att model.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAttendanceByID provides a mock function with given fields: ctx, id, lock
func (_m *MockRepository) GetAttendanceByID(ctx context.Context, id int64, lock bool) (model.Attendance, error) {
	ret := _m.Called(ctx, id, lock)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceByID")
	}

	var r0 model.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (model.Attendance, error)); ok {
		return rf(ctx, id, lock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) model.Attendance); ok {
		r0 = rf(ctx, id, lock)
	} else {
		r0 = ret.Get(0).(model.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, id, lock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttendanceByFilter provides a mock function with given fields: ctx, filters
func (_m *MockRepository) ListAttendanceByFilter(ctx context.Context, filters FilterInput) ([]model.Attendance, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListAttendanceByFilter")
	}

	var r0 []model.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, FilterInput) ([]model.Attendance, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, FilterInput) []model.Attendance); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, FilterInput) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendance provides a mock function with given fields: ctx, att
func (_m *MockRepository) UpdateAttendance(ctx context.Context, att model.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
